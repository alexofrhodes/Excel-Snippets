

Sub HeaderAdd( _
                Optional TargetWorkbook As Workbook, _
                Optional Module As VBComponent, _
                Optional Procedure As String)
                
'@BlogPosted

'@INCLUDE PROCEDURE ActiveModule
'@INCLUDE PROCEDURE AddStringParameterFromProcedureHeader
'@INCLUDE PROCEDURE AssignCPSvariables
'@INCLUDE PROCEDURE ProcedureLinesFirst
'@INCLUDE PROCEDURE ProcedureTitleClean
'@INCLUDE PROCEDURE TypeProcedureComment
'@INCLUDE PROCEDURE cpsLineFirst
'@INCLUDE DECLARATION AUTHOR_COPYRIGHT
'@INCLUDE DECLARATION AUTHOR_EMAIL
'@INCLUDE DECLARATION AUTHOR_NAME
'@INCLUDE DECLARATION AUTHOR_OTHERTEXT

'    AssignCPSvariables TargetWorkbook, Module, Procedure
    If Module Is Nothing Then Set Module = ActiveModule
    AssignWorkbookVariable TargetWorkbook
    AssignModuleVariable TargetWorkbook, Module, Procedure
    AssignProcedureVariable TargetWorkbook, Procedure
    If TargetWorkbook Is Nothing Or Module Is Nothing Then Exit Sub
    
    Const vbTab2 = vbTab & vbTab
    Const vbTab4 = vbTab2 & vbTab2
    Const sFersLine     As String = "'* Modified   :" & vbTab & "Date and Time" & vbTab2 & "Author" & vbTab4 & "Description" & vbCrLf
                
    Dim txtName         As String: txtName = AUTHOR_NAME
    If txtName = vbNullString Then txtName = Environ("UserName")
    
    Dim txtContacts     As String: txtContacts = AUTHOR_EMAIL
    If txtContacts <> vbNullString Then txtContacts = "'* Contacts   :" & vbTab & txtContacts & vbCrLf
    
    Dim txtCopyright    As String:  txtCopyright = AUTHOR_COPYRIGHT
    If txtCopyright <> vbNullString Then txtCopyright = "'* Copyright  :" & vbTab & txtCopyright & vbCrLf
    
    Dim txtOther        As String:   txtOther = AUTHOR_OTHERTEXT
    If txtOther <> vbNullString Then txtOther = "'* Note       :" & vbTab & txtOther & vbCrLf
    
    Dim txtMedia        As String:   txtMedia = "'* " & vbLf & AUTHOR_MEDIA
    Dim CurentCodePane  As CodePane: Set CurentCodePane = Module.CodeModule.CodePane
    Dim i               As Byte
    Dim ProcKind        As VBIDE.vbext_ProcKind
    Dim sProc           As String: sProc = ActiveProcedure
    Dim nLine           As Long
    If Procedure <> "" Then
        nLine = ProcedureTitleLineFirst(Module, Procedure)
    Else
        nLine = 1
    End If
    Dim sTemp           As String
    Dim sTime           As String
    Dim sType           As String
    Dim sProcDeclartion As String
    Dim sProcArguments  As String
    
    Dim sUser As String

    '* @TODO Created: 01-02-2023 08:20 Author: Anastasiou Alex
    '* @TODO if name is too long have to recalculate tab length

    sUser = "Alex"
    If sUser = vbNullString Then sUser = Environ("UserName")
    
    On Error Resume Next
   
    With Module.CodeModule.CodePane
        sTemp = Replace(String(90, "*"), "**", "* ")
        sTime = Format(Now, "dd-mm-yyyy hh:nn")
        If sProc = "" Or cpsLineFirst = 1 Then
            sType = "* Module     :"
            sProc = .CodeModule.name
            nLine = 1
        Else
            For i = 0 To 4
                ProcKind = i
                sProcDeclartion = ProcedureTitleClean(Module, sProc)
                If sProcDeclartion <> vbNullString Then Exit For
            Next
            sProcArguments = AddStringParameterFromProcedureHeader(sProcDeclartion)
            sType = TypeProcedureComment(sProcDeclartion)
        End If
        sTemp = vbLf & "'" & sTemp & vbCrLf & _
                "'" & sType & vbTab & sProc & vbCrLf & _
                "'* Author     :" & vbTab & txtName & vbCrLf & _
                txtContacts & _
                txtCopyright & _
                txtOther & _
                txtMedia & _
                sFersLine & _
                "'* Created    :" & vbTab & sTime & vbTab & sUser & vbCrLf & _
                sProcArguments & _
                "'" & sTemp
'        .CodeModule.InsertLines nLine, sTemp & vbNewLine
        nLine = ProcedureLinesFirst(ActiveModule, sProc)
        .CodeModule.InsertLines vbNewLine & nLine, sTemp & vbNewLine
        
    End With
End Sub


