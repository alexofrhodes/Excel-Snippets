
Sub ModAdd( _
            Optional TargetWorkbook As Workbook, _
            Optional Module As VBComponent, _
            Optional Procedure As String)
'@BlogPosted
'@INCLUDE PROCEDURE ActiveProcedure
'@INCLUDE PROCEDURE AssignCPSvariables
'@INCLUDE PROCEDURE ProcedureHeaderContains
'@INCLUDE PROCEDURE ProcedureHeaderLineContaining
'@INCLUDE PROCEDURE ProcedureLastModAdd
'@INCLUDE PROCEDURE ProcedureTitleLineFirst

    If Not AssignCPSvariables(TargetWorkbook, Module, Procedure) Then Exit Sub
    
    Const vbTab2 = vbTab & vbTab
    Const vbTab4 = vbTab2 & vbTab2
    Dim sTime As String: sTime = Format(Now, "dd-mm-yyyy hh:nn")
    Dim sProc As String: sProc = ActiveProcedure
    Dim nLine As Long:   nLine = ProcedureTitleLineFirst(Module, Procedure)

    '* @TODO Created: 01-02-2023 07:46 Author: Anastasiou Alex
    '* @TODO if name is too long have to recalculate tab length
    
    Dim sUser As String: sUser = "Alex"
    If sUser = vbNullString Then sUser = Environ("UserName")
    Const sUPDATE    As String = "'* Updated    :"
    Dim sFirstLine As String
        sFirstLine = "'* Modified   :" & vbTab & "Date and Time" & vbTab2 & _
                    "Author" & vbTab4 & "Description" & vbCrLf
    Dim sSecondLine  As String
        sSecondLine = sUPDATE & vbTab & sTime & vbTab & sUser & vbTab4 & "(" & sProc & ")"
    
    ProcedureLastModAdd TargetWorkbook, Module, Procedure, Format(sTime, "yymmddhhnn")
    
    On Error GoTo HELL
    
    If ProcedureHeaderContains("'* Created    :", False, True, False, _
                               TargetWorkbook, Module, Procedure) _
    And Not ProcedureHeaderContains("'* Module     :", False, True, False, _
                                    TargetWorkbook, Module, Procedure) Then
        Dim lineNo As Long
            lineNo = ProcedureHeaderLineContaining(Module, Procedure, "'* Created    :*")
        If Module.CodeModule.Lines(lineNo + 1, 1) Like sUPDATE & "*" Then
            Do
                lineNo = linneno + 1
            Loop While Module.CodeModule.Lines(lineNo, 1 + 1) Like sUPDATE & "*"
        End If
        Module.CodeModule.InsertLines lineNo + 1, sSecondLine
        Exit Sub
    End If

    If Not Module.CodeModule.Lines(nLine - 2, 1) Like sUPDATE & "*" Then
        sSecondLine = vbLf & sFirstLine & sSecondLine
    End If
    If nLine = 1 Then
        Module.CodeModule.AddFromString sSecondLine & vbNewLine
    ElseIf Len(Module.CodeModule.Lines(nLine - 1, 1)) = 0 And nLine > 1 Then
        Module.CodeModule.InsertLines nLine - 1, sSecondLine
    Else
        Module.CodeModule.InsertLines nLine, sSecondLine & vbNewLine
    End If
HELL:
End Sub
