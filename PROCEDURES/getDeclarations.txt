
Function getDeclarations( _
                        wb As Workbook, _
                        Optional includeScope As Boolean, _
                        Optional includeType As Boolean, _
                        Optional includeKeywords As Boolean, _
                        Optional includeDeclarations As Boolean, _
                        Optional includeComponentName As Boolean, _
                        Optional includeComponentType As Boolean) As Collection
'@BlogPosted
'@INCLUDE PROCEDURE DeclarationsKeywordSubstring
'@INCLUDE PROCEDURE RegexTest
'@INCLUDE PROCEDURE ModuleTypeToString
'@AssignedModule F_Vbe_Declararions

    Dim ComponentCollection     As New Collection
    Dim ComponentTypecollection As New Collection
    Dim DeclarationsCollection  As New Collection
    Dim KeywordsCollection      As New Collection
    Dim Output                  As New Collection
    Dim ScopeCollection         As New Collection
    Dim TypeCollection          As New Collection

    Dim Element                 As Variant
    Dim OriginalDeclarations    As Variant
    Dim Str                     As Variant
    
    Dim Tmp                     As String
    Dim Helper                  As String
    Dim i                       As Long
    
    Dim Module                  As VBComponent
    For Each Module In wb.VBProject.VBComponents
        If Module.Type = vbext_ct_StdModule Or Module.Type = vbext_ct_MSForm Then
            If Module.CodeModule.CountOfDeclarationLines > 0 Then
                Str = Module.CodeModule.Lines(1, Module.CodeModule.CountOfDeclarationLines)
                Str = Replace(Str, "_" & vbNewLine, "")
                OriginalDeclarations = Str
                Tmp = Str
                Do While InStr(1, Str, "End Type") > 0
                    Tmp = Mid(Str, InStr(1, Str, "Type "), InStr(1, Str, "End Type") - InStr(1, Str, "Type ") + 8)
                    Str = Replace(Str, Tmp, Split(Tmp, vbNewLine)(0))
                Loop
                Do While InStr(1, Str, "End Enum") > 0
                    Tmp = Mid(Str, InStr(1, Str, "Enum "), InStr(1, Str, "End Enum") - InStr(1, Str, "Enum ") + 8)
                    Str = Replace(Str, Tmp, Split(Tmp, vbNewLine)(0))
                Loop
                Do While InStr(1, Str, "  ") > 0
                    Str = Replace(Str, "  ", " ")
                Loop
                
                Str = Split(Str, vbNewLine)
                Tmp = OriginalDeclarations
                
                For Each Element In Str
                    If Len(CStr(Element)) > 0 And Not Trim(CStr(Element)) Like "'*" And Not Trim(CStr(Element)) Like "Rem*" Then
                        If RegexTest(CStr(Element), "\b ?Enum \b") Then
                            KeywordsCollection.Add DeclarationsKeywordSubstring(CStr(Element), " ", "Enum")
                            DeclarationsCollection.Add DeclarationsKeywordSubstring(Tmp, , "Enum " & KeywordsCollection.item(KeywordsCollection.Count), "End Enum", , , True)
                            TypeCollection.Add "Enum"
                            ComponentCollection.Add Module.name
                            ComponentTypecollection.Add ModuleTypeToString(Module.Type)
                            ScopeCollection.Add IIf(InStr(1, DeclarationsCollection.item(DeclarationsCollection.Count), "Public", vbTextCompare), "Public", "Private")
                        ElseIf RegexTest(CStr(Element), "\b ?Type \b") Then
                            KeywordsCollection.Add DeclarationsKeywordSubstring(CStr(Element), " ", "Type")
                            DeclarationsCollection.Add DeclarationsKeywordSubstring(Tmp, , "Type " & KeywordsCollection.item(KeywordsCollection.Count), "End Type", , , True)
                            TypeCollection.Add "Type"
                            ComponentCollection.Add Module.name
                            ComponentTypecollection.Add ModuleTypeToString(Module.Type)
                            ScopeCollection.Add IIf(InStr(1, DeclarationsCollection.item(DeclarationsCollection.Count), "Public", vbTextCompare), "Public", "Private")
                        ElseIf InStr(1, CStr(Element), "Const ", vbTextCompare) > 0 Then
                            KeywordsCollection.Add DeclarationsKeywordSubstring(CStr(Element), " ", "Const")
                            DeclarationsCollection.Add CStr(Element)
                            TypeCollection.Add "Const"
                            ComponentCollection.Add Module.name
                            ComponentTypecollection.Add ModuleTypeToString(Module.Type)
                            ScopeCollection.Add IIf(InStr(1, DeclarationsCollection.item(DeclarationsCollection.Count), "Public", vbTextCompare), "Public", "Private")
                        ElseIf RegexTest(CStr(Element), "\b ?Sub \b") Then
                            KeywordsCollection.Add DeclarationsKeywordSubstring(CStr(Element), " ", "Sub")
                            DeclarationsCollection.Add CStr(Element)
                            TypeCollection.Add "Sub"
                            ComponentCollection.Add Module.name
                            ComponentTypecollection.Add ModuleTypeToString(Module.Type)
                            ScopeCollection.Add IIf(InStr(1, DeclarationsCollection.item(DeclarationsCollection.Count), "Public", vbTextCompare), "Public", "Private")
                        ElseIf RegexTest(CStr(Element), "\b ?Function \b") Then
                            KeywordsCollection.Add DeclarationsKeywordSubstring(CStr(Element), " ", "Function")
                            DeclarationsCollection.Add CStr(Element)
                            TypeCollection.Add "Function"
                            ComponentCollection.Add Module.name
                            ComponentTypecollection.Add ModuleTypeToString(Module.Type)
                            ScopeCollection.Add IIf(InStr(1, DeclarationsCollection.item(DeclarationsCollection.Count), "Public", vbTextCompare), "Public", "Private")
                        ElseIf Element Like "*(*) As *" Then
                            Helper = left(Element, InStr(1, CStr(Element), "(") - 1)
                            Helper = Mid(Helper, InStrRev(Helper, " ") + 1)
                            KeywordsCollection.Add Helper
                            DeclarationsCollection.Add CStr(Element)
                            TypeCollection.Add "Other"
                            ComponentCollection.Add Module.name
                            ComponentTypecollection.Add ModuleTypeToString(Module.Type)
                            ScopeCollection.Add IIf(InStr(1, DeclarationsCollection.item(DeclarationsCollection.Count), "Public", vbTextCompare), "Public", "Private")
                        ElseIf Element Like "* As *" Then
                            KeywordsCollection.Add DeclarationsKeywordSubstring(CStr(Element), " ", , "As")
                            DeclarationsCollection.Add CStr(Element)
                            TypeCollection.Add "Other"
                            ComponentCollection.Add Module.name
                            ComponentTypecollection.Add ModuleTypeToString(Module.Type)
                            ScopeCollection.Add IIf(InStr(1, DeclarationsCollection.item(DeclarationsCollection.Count), "Public", vbTextCompare), "Public", "Private")
                        Else
                        End If
                    End If
                Next Element
            End If
        End If
    Next Module
    
    If includeScope = True Then Output.Add ScopeCollection
    If includeType = True Then Output.Add TypeCollection
    If includeKeywords = True Then Output.Add KeywordsCollection
    If includeDeclarations = True Then Output.Add DeclarationsCollection
    If includeComponentType = True Then Output.Add ComponentTypecollection
    If includeComponentName = True Then Output.Add ComponentCollection
    
    Set getDeclarations = Output
End Function
