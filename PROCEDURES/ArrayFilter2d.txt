
Function ArrayFilter2D(inputArray As Variant, matchString As String, Optional targetColumn As Long = -1) As Variant
'@LastModified 2307201044
'@INCLUDE PROCEDURE ArraySubSet
    Dim numRows As Long, numCols As Long
    numRows = UBound(inputArray, 1)
    numCols = UBound(inputArray, 2)
    
    Dim resultArray() As Variant
    Dim resultIndex As Long
    ReDim resultArray(LBound(inputArray, 1) To numRows, LBound(inputArray, 2) To numCols)
    resultIndex = LBound(resultArray, 1) - 1
    
    Dim i As Long, j As Long
    For i = LBound(resultArray, 1) To numRows
        Dim rowMatches As Boolean
        rowMatches = False
        
        If targetColumn = -1 Then
            ' Match any cell in the row using Like operator (case-insensitive)
            For j = LBound(resultArray, 2) To numCols
                If LCase(inputArray(i, j)) Like "*" & LCase(matchString) & "*" Then
                    rowMatches = True
                    Exit For
                End If
            Next j
        ElseIf targetColumn >= LBound(resultArray, 2) And targetColumn <= numCols Then
            ' Match the specified column using Like operator (case-insensitive)
            If LCase(inputArray(i, targetColumn)) Like "*" & LCase(matchString) & "*" Then
                rowMatches = True
            End If
        End If
        
        ' Copy the matching row to the result array
        If rowMatches Then
            resultIndex = resultIndex + 1
            For j = LBound(resultArray, 2) To numCols
                resultArray(resultIndex, j) = inputArray(i, j)
            Next j
        End If
    Next i
    
    ' Resize the result array to remove any empty rows
    resultArray = ArraySubSet(resultArray, LBound(resultArray, 1), LBound(resultArray, 2), resultIndex, numCols)
    ' Return the filtered array
    ArrayFilter2D = resultArray
End Function
